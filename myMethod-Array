*************** ARRAY METHOD ***********************

1) *** reduce() ***

  Array.prototype.myReduce = function (cb, init = this[0]) {
    let res = init

    for (let i = 0; i < this.length; i += 1) {
      res = cb.call(null, res, this[i], i, this)
    }

    return res
  }


2) *** every() ***
  Array.prototype.myEvery = function(cb, thisArgs) {
    for (let i = 0; i < this.length; i += 1) {
      if(!cb.call(thisArgs || null, this[i], i, this)) {
        return false
      }
    }

    return true
  }
  

3) *** filter() ****
  Array.prototype.myFilter = function (cb, thisArgs) {
    let res = []

    for (let i = 0; i < this.length; i += 1) {
      if (cb.call(thisArgs || null, this[i], i, this)) {
        res.push(this[i])
      }
    }

    return res
  }


4) *** map() ***
  Array.prototype.myMap = function (cb, thisArgs) {
    let res = []

    for (let i = 0; i < this.length; i += 1) {
      res.push(cb.call(thisArgs || null, this[i], i, this))
    }

    return res
  }
  
5) *** flat() ***

  Array.prototype.myFlat = function (n = 1) {
    let res = [];

    function flatArr(arr, n) {
        arr.forEach(item => {
            if (Array.isArray(item) && n !== 0) {
                flatArr(item, n - 1)
            } else {
                res.push(item)
            }
        })
    }

    flatArr(this, n)

    return res;
  }
  
  
6) *** reverse() ***

Array.prototype.reverse1 = function() {
  // const newArr = []

  // for (let i = this.length - 1; i >= 0; i -= 1) {
  //   newArr.push(this[i])
  // }

  // return newArr

  return this.map((el, i, arr) => arr[(this.length - 1) - i])
}


7) 

  Array.prototype.mySortBuble = function (cb) {

      for (let index = 0; index < this.length; index++) {
          for (let jex = 0; jex < this.length; jex++) {
              if (cb && cb.call(null, this[index], this[jex] !== undefined ? this[jex] : this[index]) < 0 || String(this[index]) < String(this[jex])){
                  [this[index], this[jex]] = [this[jex], this[index]]
              }
          }
      }
      return this;
  };


 8) *** sort () *** 
    числа и объекты
   Array.prototype.mySort = function (cb) {
    function swap (arr, a, b) {
      [arr[a], arr[b]] = [arr[b], arr[a]];
    }

    for (let i = 0; i <= this.length - 1; i+=1) {
      if (cb.call(null, this[i], this[i + 1] !== undefined ? this[i + 1] : this[i]) > 0) {
        swap(this, i, i + 1);
        i = -1;
      }
    }

    return this;
  };
  
  строки
Array.prototype.mySort = function (cb) { 
    function swap(arr, a, b) {
      [arr[a], arr[b]] = [arr[b], arr[a]];
    }

    for (let i = 0; i < this.length - 1; i += 1) {
        // console.log(${this[i]} ${this[i + 1]});
        if (String(this[i]) > String(this[i + 1])) {
            swap(this, i, i + 1);
            i = - 1;
        }
    }
    return this;
};
 
  
  
  
  
  
